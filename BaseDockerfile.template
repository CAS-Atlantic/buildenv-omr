# Copyright (c) 2018, 2018 IBM Corp. and others
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which accompanies this
# distribution and is available at https://www.eclipse.org/legal/epl-2.0/
# or the Apache License, Version 2.0 which accompanies this distribution and
# is available at https://www.apache.org/licenses/LICENSE-2.0.
# 
# This Source Code may also be made available under the following
# Secondary Licenses when the conditions for such availability set
# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
# General Public License, version 2 with the GNU Classpath
# Exception [1] and GNU General Public License, version 2 with the
# OpenJDK Assembly Exception [2].
# 
# [1] https://www.gnu.org/software/classpath/license.html
# [2] http://openjdk.java.net/legal/assembly-exception.html
# 
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
#
#
# Create OMR build environment with Ubuntu 16.04
# Basic usage (adapt to your environment and scenario):
#   git clone https://github.com/eclipse/omr (or cd to a directory that contains an OMR repository)
#   cd omr/buildenv/docker && docker build -f x86_64/ubuntu16/Dockerfile -t buildomr .
#   cd ../../../
#   docker run --privileged -v $PWD/omr:/omr -it buildomr
#
# The container will automatically run cmake to configure itself and then initiate the build.
# Once the build completes, you'll be left sitting at a prompt in the container so you can
# run more commands.

FROM THIS_DOCKER_ARCH/ubuntu:THIS_UBUNTU_V
COPY docker_static_bin/qemu-THIS_QEMU_ARCH-static /usr/bin/

# build requirements
RUN apt-get update -y
RUN apt-get install -y locales
RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
ENV LANG en_US.utf8

# useful for working test failures
RUN apt-get install -y \
	gdb \
	vim \
	wget \
	xz-utils \
	bash \
	ninja-build \
	python3 \
	git \
	cmake \
	bison \
	flex \
	libelf-dev \
	libdwarf-dev \
	libncurses5-dev \
	readline-common

# install defined gcc version 
RUN apt-get install -y \
	gcc-THIS_GCC_VERSION \
	g++-THIS_GCC_VERSION

RUN ln -s /usr/bin/g++-THIS_GCC_VERSION /usr/bin/g++
RUN ln -s /usr/bin/QEMU_ARCH-linux-gnu-g++-THIS_GCC_VERSION /usr/bin/QEMU_ARCH-linux-gnu-g++

# multilib not available on all arch
RUN apt-get install -y \
	gcc-THIS_GCC_VERSION-multilib \
|| true

RUN rm -rf /var/lib/apt/lists/*

CMD [ "/bin/bash" ]